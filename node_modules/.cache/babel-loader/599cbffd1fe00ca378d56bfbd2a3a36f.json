{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Saed Jaber\\\\Desktop\\\\hashmalie-main\\\\hashmalie-main\\\\test 1.3\\\\src\\\\workers_management.js\";\nimport React from 'react';\n\nclass GetRequestErrorHandling extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalReactPackages: null,\n      errorMessage: null\n    };\n  }\n\n  componentDidMount() {\n    // GET request using fetch with error handling\n    fetch('https://api.npms.io/v2/invalid-url').then(async response => {\n      const data = await response.json(); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response statusText\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      this.setState({\n        totalReactPackages: data.total\n      });\n    }).catch(error => {\n      this.setState({\n        errorMessage: error.toString()\n      });\n      console.error('There was an error!', error);\n    });\n  }\n\n  render() {\n    const {\n      errorMessage\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card text-center m-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-header\",\n        children: \"GET Request with Error Handling\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [\"Error message: \", errorMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport { GetRequestErrorHandling };","map":{"version":3,"sources":["C:/Users/Saed Jaber/Desktop/hashmalie-main/hashmalie-main/test 1.3/src/workers_management.js"],"names":["React","GetRequestErrorHandling","Component","constructor","props","state","totalReactPackages","errorMessage","componentDidMount","fetch","then","response","data","json","ok","error","message","statusText","Promise","reject","setState","total","catch","toString","console","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,uBAAN,SAAsCD,KAAK,CAACE,SAA5C,CAAsD;AAClDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,kBAAkB,EAAE,IADX;AAETC,MAAAA,YAAY,EAAE;AAFL,KAAb;AAIH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB;AACAC,IAAAA,KAAK,CAAC,oCAAD,CAAL,CACKC,IADL,CACU,MAAMC,QAAN,IAAkB;AACpB,YAAMC,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAnB,CADoB,CAGpB;;AACA,UAAI,CAACF,QAAQ,CAACG,EAAd,EAAkB;AACd;AACA,cAAMC,KAAK,GAAIH,IAAI,IAAIA,IAAI,CAACI,OAAd,IAA0BL,QAAQ,CAACM,UAAjD;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AAED,WAAKK,QAAL,CAAc;AAAEd,QAAAA,kBAAkB,EAAEM,IAAI,CAACS;AAA3B,OAAd;AACH,KAZL,EAaKC,KAbL,CAaWP,KAAK,IAAI;AACZ,WAAKK,QAAL,CAAc;AAAEb,QAAAA,YAAY,EAAEQ,KAAK,CAACQ,QAAN;AAAhB,OAAd;AACAC,MAAAA,OAAO,CAACT,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACH,KAhBL;AAiBH;;AAEDU,EAAAA,MAAM,GAAG;AACL,UAAM;AAAElB,MAAAA;AAAF,QAAmB,KAAKF,KAA9B;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,sCACoBE,YADpB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH;;AAzCiD;;AA4CtD,SAASN,uBAAT","sourcesContent":["import React from 'react';\n\nclass GetRequestErrorHandling extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            totalReactPackages: null,\n            errorMessage: null\n        };\n    }\n\n    componentDidMount() {\n        // GET request using fetch with error handling\n        fetch('https://api.npms.io/v2/invalid-url')\n            .then(async response => {\n                const data = await response.json();\n\n                // check for error response\n                if (!response.ok) {\n                    // get error message from body or default to response statusText\n                    const error = (data && data.message) || response.statusText;\n                    return Promise.reject(error);\n                }\n\n                this.setState({ totalReactPackages: data.total })\n            })\n            .catch(error => {\n                this.setState({ errorMessage: error.toString() });\n                console.error('There was an error!', error);\n            });\n    }\n\n    render() {\n        const { errorMessage } = this.state;\n        return (\n            <div className=\"card text-center m-3\">\n                <h5 className=\"card-header\">GET Request with Error Handling</h5>\n                <div className=\"card-body\">\n                    Error message: {errorMessage}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport { GetRequestErrorHandling }; "]},"metadata":{},"sourceType":"module"}